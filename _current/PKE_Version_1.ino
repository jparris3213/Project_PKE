/**************************************************************************
  Using the examples for the OLED screen + the Stepper Motor, this will
  initally ONLY handle an example loop of the arms raising and lowering
  as well as a few animation / screen examples. The EMF Functionality is not
  currently included in this version (as of v1)

  TODO
    - Adjust start up animation
    - Create GB Logo 16x16 (In Progress ln 62)
    - Implement Button Controls of Stepper Motor
    - Create Scanning Animation/Page
    - EMF Functionality
    -Integrated 9v battery
    - HARDWARE = Open Step Motor area for air flow / add open vents
    - HARDWARE = solder currently 'taped' connections for more secure power flow
    - ground wire to board for Motor Controller



  *************************************************************/

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Stepper.h>


#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

const int stepsPerRevolution = 2048;
// ULN2003 Motor Driver Pins
#define IN1 19
#define IN2 18
#define IN3 5
#define IN4 17

// Initialize Stepper Motor
Stepper myStepper(stepsPerRevolution, IN1, IN3, IN2, IN4);

//Initialize Screens
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


#define LOGO_HEIGHT   64
#define LOGO_WIDTH    58
static const unsigned char PROGMEM logo_bmp[] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x40, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xff, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x13, 0x6f, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0xfe, 0x22, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x5f, 0xfe, 0x55, 0x40, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x3f, 0xbe, 0x05, 0x50, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x02, 0x20, 0x00, 0x00, 
	0x00, 0x01, 0x7f, 0xff, 0x01, 0x50, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x05, 0x3f, 0x3f, 0xe0, 0x54, 0x00, 0x00, 0x00, 0x02, 0x3f, 0x3f, 0xf8, 0x22, 0x00, 0x00, 
	0x00, 0x05, 0x1f, 0xfe, 0xfc, 0x55, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfe, 0x00, 0x00, 0x00, 
	0x00, 0x15, 0x7f, 0xff, 0xf5, 0x55, 0x00, 0x00, 0x00, 0x02, 0xff, 0xff, 0xe2, 0x22, 0x00, 0x00, 
	0x18, 0x14, 0xff, 0xff, 0xd5, 0x55, 0x00, 0x00, 0x0c, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0x97, 0xff, 0xfd, 0x55, 0xe5, 0xe0, 0x00, 0x0b, 0xaf, 0xff, 0xfa, 0x22, 0xe3, 0xc0, 0x00, 
	0x1f, 0xef, 0xff, 0xf5, 0x53, 0xff, 0x00, 0x00, 0x07, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0x00, 0x00, 
	0x07, 0xff, 0xff, 0x55, 0x7b, 0xff, 0x00, 0x00, 0x0f, 0xff, 0x8e, 0x22, 0x7d, 0xff, 0xe0, 0x00, 
	0x0f, 0xff, 0x8d, 0x54, 0xfd, 0xff, 0xf0, 0x00, 0x00, 0x7c, 0x00, 0x03, 0xff, 0xdf, 0x00, 0x00, 
	0x00, 0x38, 0x15, 0x5f, 0xff, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x22, 0x1f, 0xf9, 0xe2, 0xc0, 0x00, 
	0x00, 0x00, 0x55, 0x7f, 0xff, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 
	0x00, 0x15, 0x54, 0xff, 0xff, 0xf5, 0x00, 0x00, 0x00, 0x02, 0x20, 0x3f, 0xff, 0xe2, 0x00, 0x00, 
	0x00, 0x05, 0x50, 0x7f, 0xff, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfd, 0xff, 0x80, 0x00, 0x00, 
	0x00, 0x05, 0x41, 0xff, 0xff, 0x54, 0x00, 0x00, 0x00, 0x02, 0x23, 0xff, 0xff, 0x20, 0x00, 0x00, 
	0x00, 0x01, 0x5f, 0xff, 0xfe, 0x50, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x55, 0xff, 0xfd, 0x50, 0x00, 0x00, 0x00, 0x00, 0x22, 0xff, 0xe2, 0x20, 0x00, 0x00, 
	0x00, 0x00, 0x55, 0x5f, 0x55, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x15, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x22, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0x55, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



void setup() {



  
  myStepper.setSpeed(5);
  Serial.begin(115200);
  myStepper.step(1000);
  delay(1000);
  myStepper.step(-1000);

  delay(1000);


  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  display.display();
  delay(2000); // Pause for 2 seconds

  // Clear the buffer
  display.clearDisplay();

  // Draw a single pixel in white
  display.drawPixel(10, 10, SSD1306_WHITE);

  // Show the display buffer on the screen. You MUST call display() after
  // drawing commands to make them visible on screen!
  display.display();
  delay(2000);
  testdrawbitmap();
  delay(2000);

  // display.display() is NOT necessary after every single drawing command,
  // unless that's what you want...rather, you can batch up a bunch of
  // drawing operations and then update the screen all at once by calling
  // display.display(). These examples demonstrate both approaches...

  display.clearDisplay();

}

void loop() {
  testdrawline();      // Draw many lines
}

void testdrawline() {
  int16_t i;

  display.clearDisplay(); // Clear display buffer

  for(i=0; i<display.width(); i+=4) {
    display.drawLine(0, 0, i, display.height()-1, SSD1306_WHITE);
    display.display(); // Update screen with each newly-drawn line
    delay(1);
  }
  for(i=0; i<display.height(); i+=4) {
    display.drawLine(0, 0, display.width()-1, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  delay(250);

  display.clearDisplay();

  delay(2000); // Pause for 2 seconds
}


void testdrawbitmap(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(1000);
}